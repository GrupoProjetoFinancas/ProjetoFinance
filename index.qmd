---
title: "Big Data for Finance"
format: html
---

## Por:

Arthur Costa Schaitza - <https://faexai.github.io/portfolio2/>

Pamela Roland - <https://pamroland.github.io/meuportfolio/>

Matheus Kochaki de Liz -

# Empresas de Sistemas na Bolsa de Nova York (NYSE)

Aqui est√£o cinco grandes empresas de software e sistemas que s√£o negociadas na **Bolsa de Nova York (NYSE):**

| C√≥digo | Empresa | Descri√ß√£o |
|------------------------|------------------------|------------------------|
| **SAP** | SAP SE | Especializada em software de gest√£o empresarial (ERP, CRM, SCM, etc.). |
| **ORCL** | Oracle Corporation | Forte em bancos de dados, ERP e solu√ß√µes na nuvem. |
| **CRM** | Salesforce Inc. | L√≠der em CRM (Customer Relationship Management) e solu√ß√µes SaaS. |
| **NOW** | ServiceNow, Inc. | Focada em automa√ß√£o de fluxos de trabalho e TI empresarial. |
| **IBM** | IBM Corporation | Forte em infraestrutura de TI, nuvem h√≠brida e IA (Watson). |

## üìå Como Investir?

Essas empresas s√£o negociadas na NYSE e podem ser adquiridas atrav√©s de corretoras internacionais.

------------------------------------------------------------------------

```{r}
#| echo: false
# Carregar pacotes necess√°rios
library(quantmod)


tickers <- c("SAP", "ORCL", "CRM", "NOW", "IBM")  # SAP, Oracle, Salesforce, ServiceNow, IBM

# Baixar dados hist√≥ricos do Yahoo Finance at√© 31/12/2024
getSymbols(tickers, src = "yahoo", from = "2023-01-01", to = "2024-12-31")

# Exibir as primeiras linhas dos dados de uma das empresas (ex: IBM)
head(NOW)
```

```{r}
#| echo: false
library(ggplot2)
library(tidyr)

# Criar um dataframe para armazenar os pre√ßos de fechamento
stock_data <- data.frame(
  Date = index(SAP),
  SAP = Cl(SAP),
  ORCL = Cl(ORCL),
  CRM = Cl(CRM),
  NOW = Cl(NOW),
  IBM = Cl(IBM)
)

# Transformar os dados para o formato longo (tidy) para usar no ggplot2
stock_data_long <- stock_data %>%
  pivot_longer(cols = -Date, names_to = "Company", values_to = "Close_Price")

# Criar o gr√°fico de s√©ries temporais
ggplot(stock_data_long, aes(x = Date, y = Close_Price, color = Company)) +
  geom_line(linewidth = 1) +
  labs(title = "S√©rie Temporal dos Pre√ßos de Fechamento das Empresas",
       x = "Data",
       y = "Pre√ßo de Fechamento (USD)",
       color = "Empresa") +
  theme_minimal()
```

## Nova Solu√ß√£o

```{r}
#| echo: false
# Carregar pacotes necess√°rios
library(quantmod)
library(tidyverse)
library(rugarch)

# 1) Baixar dados hist√≥ricos do Yahoo Finance at√© 31/12/2024
tickers <- c("SAP", "ORCL", "CRM", "NOW", "IBM") # SAP, Oracle, Salesforce, ServiceNow, IBM

# Baixar dados hist√≥ricos do Yahoo Finance at√© 31/12/2024
getSymbols(tickers, src = "yahoo", from = "2023-01-01", to = "2024-12-31")

# Extrair os pre√ßos de fechamento das a√ß√µes
SAP <- SAP$SAP.Close
ORCL <- ORCL$ORCL.Close
CRM <- CRM$CRM.Close
NOW <- NOW$NOW.Close
IBM <- IBM$IBM.Close

# Combinar os dados em um √∫nico dataframe
stock_data <- merge(SAP, ORCL, CRM, NOW, IBM)
colnames(stock_data) <- c("SAP", "ORCL", "CRM", "NOW", "IBM")

# Remover valores ausentes (NA)
stock_data <- na.omit(stock_data)

# 2) Calcular os log-retornos
log_returns <- diff(log(stock_data))[-1]

# 3) Analisar a distribui√ß√£o dos retornos transformados
# Calcular a frequ√™ncia dos retornos positivos e negativos
positive_returns <- sapply(log_returns, function(x) sum(x > 0))
negative_returns <- sapply(log_returns, function(x) sum(x < 0))

# Imprimir os resultados
cat("N√∫mero de retornos positivos:\n")
print(positive_returns)

cat("\nN√∫mero de retornos negativos:\n")
print(negative_returns)

# 4) Calcular a volatilidade dos retornos logar√≠tmicos
# a) Usando o desvio padr√£o
volatility_sd <- sapply(log_returns, sd)
cat("\nVolatilidade (desvio padr√£o):\n")
print(volatility_sd)



```

------------------------------------------------------------------------

**Explica√ß√£o em Markdown:**

Este c√≥digo R analisa a s√©rie de pre√ßos de cinco grandes empresas de software e sistemas (SAP, ORCL, CRM, NOW e IBM) negociadas na NYSE, calculando log-retornos, analisando a distribui√ß√£o dos retornos e calculando a volatilidade usando dois m√©todos: o desvio padr√£o e um modelo GARCH.

**1) C√°lculo dos Log-Retornos:**

O c√≥digo come√ßa baixando os dados hist√≥ricos de pre√ßos para as cinco empresas usando a fun√ß√£o `getSymbols` do pacote `quantmod`. Em seguida, os dados s√£o combinados em um √∫nico dataframe chamado `stock_data`. Os log-retornos s√£o calculados usando a f√≥rmula `log(p_t) - log(p_t-1)`, onde `p_t` √© o pre√ßo no tempo `t`. A coluna `LogReturn` no dataframe `stock_data` cont√©m os log-retornos calculados.

**2) An√°lise da Distribui√ß√£o dos Retornos:**

Ap√≥s calcular os log-retornos, o c√≥digo analisa a distribui√ß√£o dos retornos. Ele calcula o n√∫mero de retornos positivos e negativos. Isso fornece uma ideia da dire√ß√£o predominante dos retornos ao longo do per√≠odo analisado. Em geral, espera-se que haja mais retornos positivos do que negativos em um mercado financeiro.

**3) C√°lculo da Volatilidade:**

A volatilidade √© uma medida da dispers√£o dos retornos em torno de sua m√©dia. O c√≥digo calcula a volatilidade usando dois m√©todos:

-   **Desvio Padr√£o:** O desvio padr√£o dos log-retornos √© calculado usando a fun√ß√£o `sd()`. Este √© um m√©todo simples para estimar a volatilidade.

**Conclus√µes:**

Os resultados do c√°lculo dos log-retornos e da volatilidade podem ser usados para avaliar o risco e o retorno de cada ativo. Por exemplo, a volatilidade pode ser usada para calcular o valor em risco (VaR) de um portf√≥lio.
